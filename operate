#!/bin/bash

#!/bin/bash


rc_file=$1
tag_name=$2
publickey=$3

# Define variables
network_name="$2_network"
subnet_name="$2_subnet"
keypair_name="$2_key"
router_name="$2_router"
security_group_name="$2_security_group"
haproxy_server="$2_HAproxy"
bastion_server="$2_bastion"
dev_server="$2_dev"

echo "Running Operation mode for tag: $tag_name using $rc_file for credentials"
source $rc_file


generate_config_file()
while true
do

    required_dev_servers=$(cat servers.conf)
    echo "$(date) Reading server.conf, we need $required_dev_servers dev nodes"

    existing_servers=$(openstack server list --status ACTIVE --column Name -f value)
    devservers_count=$(grep -c $dev_server <<< $existing_servers)
    echo "$(date) Have $devservers_count dev servers"
    if(($required_dev_servers > $devservers_count)); then
        devservers_to_add=$(($required_dev_servers - $devservers_count))
        echo "$(date) Creating $devservers_to_add more dev servers ..."
        sequence=$(( $devservers_count+1 ))
        devserver_name=${dev_server}${sequence}
        while [ $devservers_to_add -gt 0 ]
        do    

            openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423"  $devserver_name --key-name "$keypair_name" --flavor "1C-2GB-50GB" --network "$network_name" --security-group "$security_group_name" 
            echo "$(date) Created $devserver_name server"
            ((devservers_to_add--))
        
            # current_servers=$(openstack server list --status ACTIVE --column Name -f value)
            sequence=$(( $sequence+1 ))
            devserver_name=${dev_server}${sequence}
            
            # while [ $(grep -ocP "${dev_server}"$sequence  <<< $current_servers ) -ne 0 ]
            # do
            #     echo "in while"
            #     sequence=$(( $sequence+1 )) 
            #     echo "$sequence"
            #     devserver_name=${dev_server}${sequence}
            #     echo "$devserver_name"
            # done

        done
        elif (( $required_dev_servers < $devservers_count )); then
            devservers_to_remove=$(($devservers_count - $required_dev_servers))
            sequence1=0
            while [[ $sequence1 -lt $devservers_to_remove ]]; do
                server_to_delete=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag_name}"'_dev([1-9]+)')     
                deleted_server=$(openstack server delete "$server_to_delete" --wait)
                echo " $(date) Deleted $server_to_delete server"
                ((sequence1++))
            done
        else
            echo "Required number of dev servers($required_dev_servers) already exist."
        fi
    echo "Entering into sleep mode"
    sleep 10
done
generate_config_file() {
    if [[ -f "$sshconfig" ]] ; then
    rm "$sshconfig"
    fi

    if [[ -f "$knownhosts" ]] ; then
        rm "$knownhosts"
    fi

    if [[ -f "$hostsfile" ]] ; then
        rm "$hostsfile"
    fi
    current_servers=$(openstack server list --status ACTIVE --column Name -f value)


}
