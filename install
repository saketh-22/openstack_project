#!/bin/bash
current_date_time=$(date)
rc_file=$1
tag_name=$2
publickey=$3
required_dev_servers=$(cat servers.conf)

echo "$current_date_time Starting deployment of $tag_name using $rc_file for credentials."
source $rc_file

# Define variables
network_name="$2_network"
subnet_name="$2_subnet"
keypair_name="$2_key"
router_name="$2_router"
security_group_name="$2_security_group"
haproxy_server="$2_HAproxy"
haproxy_server2="$2_HAproxy2"
bastion_server="$2_bastion"
dev_server="$2_dev"
vip_port="$2_vip" #virtual ip port
sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"

# Check if keypair exists
existing_keypairs=$(openstack keypair list -f value --column Name)
if echo "$existing_keypairs" | grep -qFx $keypair_name; then
    echo "$(date) $keypair_name already exists"
else
    # Create Keypair
    created_keypair=$(openstack keypair create --public-key $publickey "$keypair_name" )
    echo "$(date) Created keypair $keypair_name"
fi


# Check if network already exists
existing_networks=$(openstack network list --tag "$tag_name" --column Name -f value)

if echo "$existing_networks" | grep -qFx $network_name; then
    echo "$(date) $network_name already exists"
else
    # Create network
    created_network=$(openstack network create --tag "$tag_name" "$network_name" -f json)
    echo "$(date) Created network $network_name"
fi

# Check if subnet already exists
existing_subnets=$(openstack subnet list --tag "$tag_name" --column Name -f value)

if echo "$existing_subnets" | grep -qFx $subnet_name; then
    echo "$(date) $subnet_name already exists"
else
    # Create network
    created_subnet=$(openstack subnet create --subnet-range 10.10.0.0/24 --allocation-pool start=10.10.0.2,end=10.10.0.30 --tag "$tag_name" --network "$network_name" "$subnet_name" -f json)
    echo "$(date) Created subnet $subnet_name"
fi

# check if router already exists
existing_routers=$(openstack router list --tag "$tag_name" --column Name -f value)
if echo "$existing_routers" | grep -qFx $router_name; then
    echo "$(date) $router_name already exists"
else
    created_router=$(openstack router create --tag $tag_name $router_name )
    echo "$(date) Created router $router_name"
    # add subnet and externel gateway to the router
    set_gateway=$(openstack router set --external-gateway ext-net $router_name)
    add_subnet=$(openstack router add subnet $router_name $subnet_name)
fi

# check if security group already exists
existing_security_groups=$(openstack security group list --tag $tag_name -f value)
# create security group
if [[ -z "$existing_security_groups" ||  "$existing_security_groups" != *"$security_group_name"* ]]
then
    created_security_group=$(openstack security group create --tag $tag_name $security_group_name -f json)
    rule1=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress $security_group_name)
    rule2=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 80 --protocol icmp --ingress $security_group_name)
    rule3=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress $security_group_name)
    rule4=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress $security_group_name)
    rule5=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress $security_group_name)
    rule6=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress $security_group_name)
    rule7=$(openstack security group rule create --protocol 112 $security_group_name) #VVRP protocol

    echo "$(date) Created security group $security_group_name"
else
    echo "$(date) $security_group_name already exists"
fi

if [[ -f "$sshconfig" ]] ; then
    rm "$sshconfig"
fi

if [[ -f "$knownhosts" ]] ; then
    rm "$knownhosts"
fi

if [[ -f "$hostsfile" ]] ; then
    rm "$hostsfile"
fi

# if [[ -f "$f1" ]] ; then
#     rm "$f1"
# fi

# if [[ -f "$f2" ]] ; then
#     rm "$f2"
# fi

## Create port for Virtual IP
vip=$(openstack port create --network "$network_name" --fixed-ip subnet="$subnet_name" --no-security-group "$vip_port" )

unassigned_ips=$(openstack floating ip list --status DOWN -f value -c "Floating IP Address")

# create servers
existing_servers=$(openstack server list --status ACTIVE --column Name -f value)

if [[ "$existing_servers" == *"$bastion_server"* ]]; then
        echo "$(date) $bastion_server already exists"
else
   if [[ -n "$unassigned_ips" ]]; then
        fip1=$(echo "$unassigned_ips" | awk '{print $1}')
        if [[ -n "$fip1" ]]; then
            echo "$(date) Created floating ip for bastion server"
        else
            echo "$(date) Creating floating ip for bastion"
            created_fip1=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip1)
            fip1="$(cat floating_ip1)"
        fi
    else
            echo "$(date) Creating floating ip for bastion"
            created_fip1=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip1)
            fip1="$(cat floating_ip1)"
    fi
    bastion=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" $bastion_server --key-name $keypair_name --flavor "1C-2GB-50GB" --network $network_name --security-group $security_group_name) 
    add_bastion_fip=$(openstack server add floating ip $bastion_server $fip1) 
    echo "$(date) created $bastion_server server"
fi


if [[ "$existing_servers" == *"$haproxy_server"* ]]; then
        echo "$(date) HAproxy already exists"
else 
    if [[ -n "$unassigned_ips" ]]; then
        fip2=$(echo "$unassigned_ips" | awk '{print $2}')
        if [[ -n "$fip2" ]]; then
            echo "
            $(date) Created floating ip for HAproxy server (Floating ip for Virtual IP)"
        else
            echo " $(date) Creating floating ip for HAproxy (Floating ip for Virtual IP)"
            created_fip2=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip2)
            fip2="$(cat floating_ip2)"
        fi
    else
            echo "$(date) Creating floating ip for HAproxy (Floating ip for Virtual IP)"
            created_fip2=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip2)
            fip2="$(cat floating_ip2)"
    fi
    haproxy=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" $haproxy_server --key-name $keypair_name --flavor "1C-2GB-50GB" --network $network_name --security-group $security_group_name) 
    haproxy2=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" $haproxy_server2 --key-name $keypair_name --flavor "1C-2GB-50GB" --network $network_name --security-group $security_group_name) 
    # add_haproxy_fip=$(openstack server add floating ip $haproxy_server $fip2)
    # add_haproxy2_fip=$(openstack server add floating ip $haproxy_server2 $fip2)

    echo "$(date) created two HAproxy servers"
fi

## Attatch floating ip to vip port
add_vip_fip=$(openstack floating ip set --port "$vip_port" $fip2)

vip_addr=$(openstack port show "$vip_port" -f value -c fixed_ips | grep -Po '\d+\.\d+\.\d+\.\d+')
echo "$vip_addr" >> vipaddr

## Update vip port with fp pair
update_port=$(openstack port set --allowed-address ip-address="$fip2" "$vip_port")

devservers_count=$(grep -ocP $dev_server <<< $existing_servers)


if(($required_dev_servers > $devservers_count)); then
    devservers_to_add=$(($required_dev_servers - $devservers_count))
    sequence=$(( $devservers_count+1 ))
    devserver_name=${dev_server}${sequence}

    while [ $devservers_to_add -gt 0 ]  
    do    
        server_output=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423"  $devserver_name --key-name "$keypair_name" --flavor "1C-2GB-50GB" --network $network_name --security-group $security_group_name)
        echo "$(date) Created $devserver_name server"
        ((devservers_to_add--))
        
        active=false
        while [ "$active" = false ]; do
            server_status=$(openstack server show "$devserver_name" -f value -c status)
            if [ "$server_status" == "ACTIVE" ]; then
                active=true
            fi
        done

        sequence=$(( $sequence+1 ))
        devserver_name=${dev_server}${sequence}

    done

elif (( $required_dev_servers < $devservers_count )); then
    devservers_to_remove=$(($devservers_count - $required_dev_servers))
    sequence1=0
    while [[ $sequence1 -lt $devservers_to_remove ]]; do
        server_to_delete=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag_name}"'_dev([1-9]+)')   
        deleted_server=$(openstack server delete "$server_to_delete" --wait)
        echo " $(date) Deleted $server_to_delete server"
        ((sequence1++))
    done
else
    echo "Required number of dev servers($required_dev_servers) already exist."
fi


bastionfip=$(openstack server list --name $bastion_server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
haproxyfip=$(openstack server show $haproxy_server -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')
haproxyfip2=$(openstack server list --name $haproxy_server2 -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')

#update ports of haproxy servers
portid_ha1=$(openstack port list --fixed-ip ip-address="$haproxyfip" -c ID -f value)
portid_ha2=$(openstack port list --fixed-ip ip-address="$haproxyfip2" -c ID -f value)

update_port1=$(openstack port set --allowed-address ip-address="$vip_addr" "$portid_ha1")
update_port2=$(openstack port set --allowed-address ip-address="$vip_addr" "$portid_ha2")


echo "$(date) Generating config file"
echo "Host $bastion_server" >> $sshconfig
echo "   User ubuntu" >> $sshconfig
echo "   HostName $bastionfip" >> $sshconfig
echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
echo "   UserKnownHostsFile /dev/null" >> $sshconfig
echo "   StrictHostKeyChecking no" >> $sshconfig
echo "   PasswordAuthentication no" >> $sshconfig

echo " " >> $sshconfig
echo "Host $haproxy_server" >> $sshconfig
echo "   User ubuntu" >> $sshconfig
echo "   HostName $haproxyfip" >> $sshconfig
echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
echo "   StrictHostKeyChecking no" >> $sshconfig
echo "   PasswordAuthentication no ">> $sshconfig
echo "   ProxyJump $bastion_server" >> $sshconfig

echo " " >> $sshconfig
echo "Host $haproxy_server2" >> $sshconfig
echo "   User ubuntu" >> $sshconfig
echo "   HostName $haproxyfip2" >> $sshconfig
echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
echo "   StrictHostKeyChecking no" >> $sshconfig
echo "   PasswordAuthentication no ">> $sshconfig
echo "   ProxyJump $bastion_server" >> $sshconfig

# generate hosts file
echo "[bastion]" >> $hostsfile
echo "$bastion_server" >> $hostsfile
echo " " >> $hostsfile
echo "[HAproxy]" >> $hostsfile
echo "$haproxy_server" >> $hostsfile
echo "$haproxy_server2" >> $hostsfile

echo " " >> $hostsfile
echo "[webservers]" >> $hostsfile

# Get the list of active servers
active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${tag_name}"'_dev([1-9]+)')
echo "$active_Servers"
# Loop through each active server and extract its IP address
for server in $active_servers; do
        ip_address=$(openstack server list --name $server -c Networks -f value | grep -Po  '\d+\.\d+\.\d+\.\d+')
        echo " " >> $sshconfig
        echo "Host $server" >> $sshconfig
        echo "   User ubuntu" >> $sshconfig
        echo "   HostName $ip_address" >> $sshconfig
        echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
        echo "   UserKnownHostsFile=~/dev/null" >> $sshconfig
        echo "   StrictHostKeyChecking no" >> $sshconfig
        echo "   PasswordAuthentication no" >> $sshconfig
        echo "   ProxyJump $bastion_server" >> $sshconfig 

        echo "$server" >> $hostsfile
done

echo " " >> $hostsfile
echo "[primary_proxy]" >> $hostsfile
echo "$haproxy_server" >> $hostsfile
echo " " >> $hostsfile
echo "[backup_proxy]" >> $hostsfile
echo "$haproxy_server2" >> $hostsfile

echo " " >> $hostsfile
echo "[all:vars]" >> $hostsfile
echo "ansible_user=ubuntu" >> $hostsfile
echo "ansible_ssh_private_key_file=~/.ssh/id_rsa" >> $hostsfile
echo "ansible_ssh_common_args=' -F $sshconfig '" >> $hostsfile

echo "$(date) Running ansible playbook"
ansible-playbook -i "$hostsfile" site.yaml
