#!/bin/bash
current_date_time=$(date)
rc_file=$1
tag_name=$2
publickey=$3
required_dev_servers=$(cat servers.conf)

echo "$current_date_time Starting deployment of $tag_name using $rc_file for credentials."
source $rc_file

# Define variables
network_name="$2_network"
subnet_name="$2_subnet"
keypair_name="$2_key"
router_name="$2_router"
security_group_name="$2_security_group"
haproxy_server="$2_HAproxy"
bastion_server="$2_bastion"
dev_server="$2_dev"
sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"

# Check if keypair exists
existing_keypairs=$(openstack keypair list -f value --column Name)
if echo "$existing_keypairs" | grep -qFx $keypair_name; then
    echo "$(date) $keypair_name already exists"
else
    # Create Keypair
    created_keypair=$(openstack keypair create --public-key $publickey "$keypair_name" )
    echo "$(date) Created keypair $keypair_name"
fi
    

# Check if network already exists
existing_networks=$(openstack network list --tag "$tag_name" --column Name -f value)

if echo "$existing_networks" | grep -qFx $network_name; then
    echo "$(date) $network_name already exists"
else
    # Create network
    created_network=$(openstack network create --tag "$tag_name" "$network_name" -f json)
    echo "$(date) Created network $network_name"
fi

# Check if subnet already exists
existing_subnets=$(openstack subnet list --tag "$tag_name" --column Name -f value)

if echo "$existing_subnets" | grep -qFx $subnet_name; then
    echo "$(date) $subnet_name already exists"
else
    # Create network
    created_subnet=$(openstack subnet create --subnet-range 10.10.0.0/24 --allocation-pool start=10.10.0.2,end=10.10.0.30 --tag "$tag_name" --network "$network_name" "$subnet_name" -f json)
    echo "$(date) Created subnet $subnet_name"
fi

# check if router already exists
existing_routers=$(openstack router list --tag "$tag_name" --column Name -f value)
if echo "$existing_routers" | grep -qFx $router_name; then
    echo "$(date) $router_name already exists"
else
    created_router=$(openstack router create --tag $tag_name $router_name )
    echo "$(date) Created router $router_name"
    # add subnet and externel gateway to the router
    openstack router add subnet $router_name $subnet_name
    openstack router set --external-gateway ext-net $router_name
fi


# check if security group already exists
existing_security_groups=$(openstack security group list --tag $tag_name -f value)
# create security group
if [[ -z "$existing_security_groups" ||  "$existing_security_groups" != *"$security_group_name"* ]]
then
    created_security_group=$(openstack security group create --tag $tag_name $security_group_name -f json)
    openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress $security_group_name
    openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 80 --protocol icmp --ingress $security_group_name
    openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress $security_group_name
    openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress $security_group_name
    openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress $security_group_name
    openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress $security_group_name
    echo "$(date) Created security group $security_group_name"
else
    echo "$(date) $security_group_name already exists"
fi

# create floating ip for bastion and haproxy
created_fip1=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip)
fip1="$(cat floating_ip)"

created_fip2=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip1)
fip2="$(cat floating_ip1)"
echo "$(date) created floating ip addresses"

if [[ -f "$sshconfig" ]] ; then
    rm "$sshconfig"
fi

if [[ -f "$knownhosts" ]] ; then
    rm "$knownhosts"
fi

if [[ -f "$hostsfile" ]] ; then
    rm "$hostsfile"
fi

if [[ -f "$floating_ip" ]] ; then
    rm "$floating_ip"
fi

if [[ -f "$floating_ip1" ]] ; then
    rm "$floating_ip1"
fi


# create servers
existing_servers=$(openstack server list --status ACTIVE --column Name -f value)

if [[ "$existing_servers" == *"$bastion_server"* ]]; then
        echo "$(date) $bastion_server already exists"
else 
    openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" $bastion_server --key-name $keypair_name --flavor "1C-2GB-50GB" --network $network_name --security-group $security_group_name 
    openstack server add floating ip $bastion_server $fip1
    echo "$(date) created $bastion_server server"
fi

echo "Host $bastion_server" >> $sshconfig
echo "   User ubuntu" >> $sshconfig
echo "   HostName $fip1" >> $sshconfig
echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
echo "   StrictHostKeyChecking no" >> $sshconfig
echo "   PasswordAuthentication no" >> $sshconfig

if [[ "$existing_servers" == *"$haproxy_server"* ]]; then
        echo "$(date) $haproxy_server already exists"
else 
    openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" $haproxy_server --key-name $keypair_name --flavor "1C-2GB-50GB" --network $network_name --security-group $security_group_name 
    openstack server add floating ip $haproxy_server $fip2
    echo "$(date) created $haproxy_server server"
fi

echo " " >> $sshconfig
echo " Host $haproxy_server" >> $sshconfig
echo "   User ubuntu" >> $sshconfig
echo "   HostName $fip2" >> $sshconfig
echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
echo "   StrictHostKeyChecking no" >> $sshconfig
echo "   PasswordAuthentication no ">> $sshconfig


# generate hosts file
echo "[HAproxy]" >> $hostsfile
echo "$haproxy_server" >> $hostsfile
echo " " >> $hostsfile
echo "[webservers]" >> $hostsfile

devservers_count=$(grep -ocP $dev_server <<< $existing_servers)

if(($required_dev_servers > $devservers_count)); then
    devservers_to_add=$(($required_dev_servers - $devservers_count))
    sequence=$(( $devservers_count+1 ))
    devserver_name=${dev_server}${sequence}

    while [ $devservers_to_add -gt 0 ]  
    do    
        server_output=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423"  $devserver_name --key-name "$keypair_name" --flavor "1C-2GB-50GB" --network $network_name --security-group $security_group_name)
        echo "$(date) Created $devserver_name server"
        ((devservers_to_add--))
        active=false
        while [ "$active" = false ]; do
            server_status=$(openstack server show "$devserver_name" -f value -c status)
            if [ "$server_status" == "ACTIVE" ]; then
                active=true
            fi
        done
        ip_address=$(openstack server list --long -f json | jq -r --arg server "$devserver_name" --arg network "$network_name" '.[] | select(.Name == $server) | .Networks[$network][0]')

        echo "ip: $ip_address"

        echo " " >> $sshconfig
        echo "Host $devserver_name" >> $sshconfig
        echo "   User ubuntu" >> $sshconfig
        echo "   HostName $ip_address" >> $sshconfig
        echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
        echo "   UserKnownHostsFile=~/dev/null" >> $sshconfig
        echo "   StrictHostKeyChecking no" >> $sshconfig
        echo "   PasswordAuthentication no" >> $sshconfig
        echo "   ProxyCommand ssh -W %h:%p $bastion_server" >> $sshconfig 

        echo "$devserver_name" >> $hostsfile

        current_servers=$(openstack server list --status ACTIVE --column Name -f value)
        sequence=$(( $sequence+1 ))
        ip_count=$(( $ip_count+1 ))
        devserver_name=${dev_server}${sequence}

    done

elif (( $required_dev_servers < $devservers_count )); then
    devservers_to_remove=$(($devservers_count - $required_dev_servers))
    sequence1=0
    while [[ $sequence1 -lt $devservers_to_remove ]]; do
        current_servers=$(openstack server list --status ACTIVE --column Name -f value)
        devserver_name=$(grep -m1 -oP "${dev_server}_([0-9]+)" <<< "$current_servers")
        openstack server delete "$devserver_name"
        ((sequence1++))
    done
else
    echo "Required number of dev servers($required_dev_servers) already exist."
fi

existing_servers=$(openstack server list --status ACTIVE --column Name -f value)

echo " " >> $hostsfile
echo "[all:vars]" >> $hostsfile
echo "ansible_user=ubuntu" >> $hostsfile
echo "#ansible_ssh_private_key_file=~/.ssh/id_rsa" >> $hostsfile

# config_file="$(dirname "$0")/config"
# ssh -F "$config_file"